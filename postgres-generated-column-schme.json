{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://example.com/postgres-generated-column-schema.json",
  "title": "PostgreSQL Generated Column Definition",
  "description": "Schema for defining generated/calculated columns in PostgreSQL (v12+)",
  "type": "object",
  "required": ["name", "dataType", "generatedExpression"],
  "properties": {
    "name": {
      "type": "string",
      "description": "Column name",
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
    },
    "dataType": {
      "type": "string",
      "description": "PostgreSQL data type for the generated column",
      "enum": [
        "smallint", "integer", "bigint", "decimal", "numeric",
        "real", "double precision", "money",
        "character varying", "varchar", "character", "char", "text",
        "bytea", "timestamp", "timestamp without time zone",
        "timestamp with time zone", "timestamptz", "date", "time",
        "time without time zone", "time with time zone", "timetz",
        "interval", "boolean", "point", "line", "lseg", "box", "path",
        "polygon", "circle", "cidr", "inet", "macaddr", "macaddr8",
        "bit", "bit varying", "tsvector", "tsquery", "uuid", "xml",
        "json", "jsonb", "int4range", "int8range", "numrange",
        "tsrange", "tstzrange", "daterange"
      ]
    },
    "length": {
      "type": "integer",
      "description": "Length for varchar, char, etc.",
      "minimum": 1
    },
    "precision": {
      "type": "integer",
      "description": "Precision for numeric types",
      "minimum": 1
    },
    "scale": {
      "type": "integer",
      "description": "Scale for numeric types",
      "minimum": 0
    },
    "generatedExpression": {
      "type": "string",
      "description": "SQL expression used to calculate the column value",
      "minLength": 1,
      "examples": [
        "(first_name || ' ' || last_name)",
        "(price * quantity)",
        "(UPPER(email))",
        "(EXTRACT(YEAR FROM birth_date))",
        "(CASE WHEN status = 'active' THEN 1 ELSE 0 END)"
      ]
    },
    "generationType": {
      "type": "string",
      "enum": ["STORED", "VIRTUAL"],
      "description": "Storage type for generated column. STORED is computed on write and stored. VIRTUAL is computed on read (not yet supported in PostgreSQL).",
      "default": "STORED"
    },
    "collation": {
      "type": "string",
      "description": "Collation for text columns",
      "examples": ["C", "POSIX", "en_US.utf8"]
    },
    "notNull": {
      "type": "boolean",
      "description": "NOT NULL constraint. Note: Generated columns can be NOT NULL if the expression guarantees non-null values.",
      "default": false
    },
    "unique": {
      "type": "boolean",
      "description": "UNIQUE constraint on the generated column",
      "default": false
    },
    "check": {
      "type": "string",
      "description": "CHECK constraint expression for the generated column",
      "examples": [
        "(full_name <> '')",
        "(total_price >= 0)"
      ]
    },
    "comment": {
      "type": "string",
      "description": "Comment/documentation for the generated column"
    },
    "dependencies": {
      "type": "array",
      "description": "List of column names that this generated column depends on (for documentation purposes)",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "examples": [
        ["first_name", "last_name"],
        ["price", "quantity", "tax_rate"]
      ]
    },
    "indexable": {
      "type": "boolean",
      "description": "Whether this column should be indexed (generated columns can be indexed)",
      "default": false
    },
    "indexOptions": {
      "type": "object",
      "description": "Index configuration if indexable is true",
      "properties": {
        "name": {
          "type": "string",
          "description": "Custom index name"
        },
        "method": {
          "type": "string",
          "enum": ["btree", "hash", "gist", "gin", "spgist", "brin"],
          "description": "Index method",
          "default": "btree"
        },
        "unique": {
          "type": "boolean",
          "description": "Create unique index",
          "default": false
        },
        "where": {
          "type": "string",
          "description": "Partial index predicate"
        },
        "order": {
          "type": "string",
          "enum": ["ASC", "DESC"],
          "description": "Sort order"
        },
        "nulls": {
          "type": "string",
          "enum": ["FIRST", "LAST"],
          "description": "NULL ordering"
        }
      }
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "name": "full_name",
      "dataType": "text",
      "generatedExpression": "(first_name || ' ' || last_name)",
      "generationType": "STORED",
      "notNull": false,
      "dependencies": ["first_name", "last_name"],
      "comment": "Concatenated full name from first and last name"
    },
    {
      "name": "total_price",
      "dataType": "numeric",
      "precision": 10,
      "scale": 2,
      "generatedExpression": "(price * quantity * (1 + tax_rate))",
      "generationType": "STORED",
      "notNull": true,
      "check": "(total_price >= 0)",
      "dependencies": ["price", "quantity", "tax_rate"],
      "indexable": true,
      "comment": "Total price including tax"
    },
    {
      "name": "age",
      "dataType": "integer",
      "generatedExpression": "(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM birth_date))",
      "generationType": "STORED",
      "dependencies": ["birth_date"],
      "comment": "Calculated age in years"
    },
    {
      "name": "email_domain",
      "dataType": "text",
      "generatedExpression": "(SUBSTRING(email FROM '@(.*)$'))",
      "generationType": "STORED",
      "dependencies": ["email"],
      "indexable": true,
      "indexOptions": {
        "method": "btree"
      },
      "comment": "Domain extracted from email address"
    }
  ]
}